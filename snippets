Concatenate strings from multiple rows into single row, also applies to grouping
Select Group by then in new column, select SUM as operation and select the column you want to concatenate, assign name and click ok
Added column will show as error. in the formula bar, = Table.Group(#"Added Custom", {"GroupColumn"}, {{"CustomColumn", each Text.Combine([column], ";"), type nullable text}})

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Count the columns with non blanks
add new column and add this formula -> List.Count(List.RemoveNulls(Record.ToList(Record.RemoveFields(_, "Vehicle ID"))))
https://community.fabric.microsoft.com/t5/Power-Query/Need-to-count-columns-in-a-row-that-are-not-null/td-p/3067269

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Get the row with max value from the group
let
    Source = Excel.CurrentWorkbook(){[Name="DataDump"]}[Content],
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"RecordID", type text}, {"Shift Date", type date}, {"Claims Assistant Support", type text}, {"LOB", type text}, {"Task", type text}, {"Claim # / Subject Name / Folder ID", type text}, {"Remarks", type text}, {"Due Date", type number}, {"Task Started", type number}, {"Task Completed", type number}}),
    #"handling time" = Table.AddColumn(#"Changed Type", "Handling Time", each [Task Completed]-[Task Started], type number),
    #"Added Custom2" = Table.AddColumn(#"handling time", "Remarks_", each if [Remarks] <> "" and [Remarks] <> null then DateTime.ToText(DateTime.From([Task Completed]),"MM/dd HH:mm tt") & " - " & [Remarks] & "; #(lf)" else ""),
    #"Grouped Rows" = Table.Group(#"Added Custom2", {"RecordID"}, {{"Handling Time", each List.Sum([Handling Time]), type number}, {"LastUpdate", each List.Max([Task Completed]), type nullable number}, {"Data", each _, type table [RecordID=nullable text, Shift Date=nullable date, Claims Assistant Support=nullable text, LOB=nullable text, Task=nullable text, #"Claim # / Subject Name / Folder ID"=nullable text, Product Type=text, Diagnosis=text, ICD 9=text, Age=any, Occupation=text, Claims Professional=text, Referral Type=text, Mode of Transaction=text, Referral Date=number, Completion Date=text, Due Date=nullable number, Volume=text, Complexity=text, Remarks=nullable text, Target AHT=text, TAT=number, Task Started=nullable number, Task Completed=nullable number, Handling Time=number, Remarks_=text]}}),
    #"Added Custom" = Table.AddColumn(#"Grouped Rows", "Record", each Table.Max ( [Data] , "Task Completed" )),
    #"Added Custom1" = Table.AddColumn(#"Added Custom", "Remarks", each Text.Combine ( [Data][Remarks_], "")),
    #"Expanded Record" = Table.ExpandRecordColumn(#"Added Custom1", "Record", {"Shift Date", "Claims Assistant Support", "LOB", "Task", "Claim # / Subject Name / Folder ID", "Product Type", "Diagnosis", "ICD 9", "Age", "Occupation", "Claims Professional", "Referral Type", "Mode of Transaction", "Referral Date", "Completion Date", "Due Date", "Volume", "Complexity", "Target AHT", "TAT"}, {"Shift Date", "Claims Assistant Support", "LOB", "Task", "Claim # / Subject Name / Folder ID", "Product Type", "Diagnosis", "ICD 9", "Age", "Occupation", "Claims Professional", "Referral Type", "Mode of Transaction", "Referral Date", "Completion Date", "Due Date", "Volume", "Complexity", "Target AHT", "TAT"}),
    #"Removed Columns" = Table.RemoveColumns(#"Expanded Record",{"Data"}),
    #"Reordered Columns" = Table.ReorderColumns(#"Removed Columns",{"RecordID", "Shift Date", "Claims Assistant Support", "LOB", "Task", "Claim # / Subject Name / Folder ID", "Product Type", "Diagnosis", "ICD 9", "Age", "Occupation", "Claims Professional", "Referral Type", "Mode of Transaction", "Referral Date", "Completion Date", "Due Date", "TAT", "Volume", "Complexity", "Target AHT", "Handling Time", "LastUpdate", "Remarks"}),
    #"tat status" = Table.AddColumn(#"Reordered Columns", "TargetStatus", each if [LastUpdate] <= Number.From([Due Date]) then "Passed" else "Missed"),
    #"Changed Type1" = Table.TransformColumnTypes(#"tat status",{{"Due Date", type datetime}, {"LastUpdate", type datetime}, {"Handling Time", type time}})
in
    #"Changed Type1"

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Extract number in Alpha Numeric String like "ABCD1234"
https://community.fabric.microsoft.com/t5/Desktop/PowerQuery-Extract-Numbers-from-A-string-eg-ABCD1234/m-p/198666

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Compute the performance change with non consecutive dates

ChatGPT
To compute the performance change between the current date and the previous available date (which may not be the immediate previous day), you need to modify the DAX expression to handle this scenario. Hereâ€™s how you can adjust the calculation:

Calculating Performance Change with Non-Consecutive Dates
If your dates are not consecutive (e.g., skipping weekends or holidays), and you want to compute the performance change based on the last available date before the current date, you can adjust your DAX measure accordingly:

dax
Copy code
PerformanceChange = 
VAR CurrentDate = MAX(Sales[Date])
VAR PreviousDate = 
    CALCULATE(
        MAX(Sales[Date]),
        FILTER(
            ALL(Sales),
            Sales[Date] < CurrentDate
        )
    )
VAR CurrentRevenue = 
    CALCULATE(
        SUM(Sales[Revenue]),
        Sales[Date] = CurrentDate
    )
VAR PreviousRevenue = 
    CALCULATE(
        SUM(Sales[Revenue]),
        Sales[Date] = PreviousDate
    )
RETURN
    IF(
        ISBLANK(PreviousRevenue),
        BLANK(),
        CurrentRevenue - PreviousRevenue
    )
Explanation:
CurrentDate: This variable captures the maximum date currently in context.
PreviousDate: Using CALCULATE and FILTER, this variable finds the maximum date that is less than CurrentDate. The ALL(Sales) function ensures that all dates are considered, not just those in the current filter context.
CurrentRevenue: Calculates the sum of revenue for the CurrentDate.
PreviousRevenue: Calculates the sum of revenue for the PreviousDate.
RETURN: Computes the difference between CurrentRevenue and PreviousRevenue. If PreviousRevenue is blank (meaning there is no previous date with revenue), it returns BLANK().
Considerations:
Non-Consecutive Dates: This approach handles scenarios where dates are not consecutive by finding the last available date before the current date.

Date Handling: Ensure your date column (Sales[Date]) is correctly referenced and that your date filtering logic (FILTER(ALL(Sales), ...) adjusts based on your specific requirements, such as excluding weekends or holidays.

Performance: Depending on the size of your dataset, consider the performance implications of using ALL(Sales) for large datasets. You may need to optimize this based on your specific scenario.

This DAX measure should now correctly compute the performance change between the current date and the last available date before it, even if they are not consecutive dates like Monday and Friday. Adjust the logic further if your specific business rules require additional considerations for date filtering or handling missing data scenarios.
